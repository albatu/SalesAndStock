@using Blazor2.Models.Stock
@using Business.Interfaces
@using Entities.Entities
@inject IStockService StockService
@inject IProductService ProductService
@inject NotificationService NotificationService
<RadzenTemplateForm Data="@entity" Submit="@((StockViewModel args) => { Submit(args); })">
    <RadzenFieldset Text="Stok Ekleme İşlemi">
        <div class="row" style="margin-bottom:5px">
            <div class="align-items-center d-flex col-md-3">
                <RadzenLabel Text="Ürün Seç" />
            </div>
            <div class="col-md-9">
                <RadzenDropDownDataGrid TValue="int" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        AllowFiltering="true" AllowClear="true" @bind-Value="entity.ProductId"
                                        Data=@(productList) Style="width: 100%" AllowColumnResize="true" SelectedItem="entity"
                                        TextProperty="ProductName" ValueProperty="ProductId" AllowFilteringByAllStringColumns="true">
                    <Columns>
                        <RadzenDropDownDataGridColumn Property="Id" Title="Id" Width="100px" />
                        <RadzenDropDownDataGridColumn Property="ProductName" Title="Ürün Adı" Width="200px" />
                        <RadzenDropDownDataGridColumn Property="BrandsName" Title="Marka" Width="100px" />
                        <RadzenDropDownDataGridColumn Property="CateogryName" Title="Kategorisi" Width="100px" />
                    </Columns>
                </RadzenDropDownDataGrid>
            </div>
        </div>
        <div class="row" style="margin-bottom:5px">
            <div class="align-items-center d-flex col-md-3">
                <RadzenLabel Text="Stok Adeti" />
            </div>
            <div class="col-md-3">
                <RadzenNumeric Placeholder="300" style="width: 100%;" Name="Amount" @bind-Value="entity.Piece" />
            </div>
            <div class="align-items-center d-flex col-md-2">
                <RadzenLabel Text="Stok Tarihi:" />
            </div>
            <div class="col-md-4">
                <RadzenDatePicker ShowTime="true" @bind-Value="entity.StockDate"
                                  ShowSeconds="true" HoursStep="1" MinutesStep="5" SecondsStep="10"
                                  DateFormat="dd/MM/yyyy HH:mm" Class="w-100" />
            </div>
        </div>
        <div class="row" style="margin-bottom:5px">

            <div class="col-md-4">
            </div>
            <div class="col-md-4">
            </div>
            <div class="col-md-4">
                <RadzenButton Text="Stok Ekle" Icon="plus" ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" />
            </div>
        </div>
    </RadzenFieldset>
</RadzenTemplateForm>
@code {
    StockViewModel entity;
    IEnumerable<StockViewModel> productList;
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public int ProductId { get; set; }
    protected override void OnInitialized()
    {

        var item = ProductService.GetById(ProductId);
        if (item == null)
        {

            entity = new StockViewModel()
            {
                Id = 0,
                BrandsId = 0,
                BrandsName = "",
                CategoryId = 0,
                CateogryName ="",
                Price = 0,
                Piece = 0,
                ProductId = 0,
                ProductName = "",
                StockDate = DateTime.Now
            };
        }else
        {
            entity = new StockViewModel
            {
                ProductId = item.Id,
                ProductName = item.Name,
                BrandsId = item.BrandId.Id,
                BrandsName = item.BrandId.Name,
                CategoryId = item.CategoryId.Id,
                CateogryName = item.CategoryId.Name
            };
        }
        

        productList = Products().ToList();
        if (Id != 0)
        {
            var stock = StockService.GetById(Id);
            entity = new StockViewModel
                {
                    Id = stock.Id,
                    BrandsId = stock.ProductId.BrandId.Id,
                    BrandsName = stock.ProductId.BrandId.Name,
                    CategoryId = stock.ProductId.CategoryId.Id,
                    CateogryName = stock.ProductId.CategoryId.Name,
                    Piece = stock.ProductId.Id,
                    ProductId = stock.ProductId.Id,
                    ProductName = stock.ProductId.Name,
                    StockDate = stock.StockDate
                };
        }
        else
        {
            entity = new StockViewModel()
            {
                Id = 0,
                BrandsId = 0,
                BrandsName = "",
                CategoryId = 0,
                CateogryName ="",
                Price = 0,
                Piece = 0,
                ProductId = 0,
                ProductName = "",
                StockDate = DateTime.Now
            };
        }
        base.OnInitialized();
    }

    private IEnumerable<StockViewModel> Products()
    {
        List<StockViewModel> model = new List<StockViewModel>();

        var products = ProductService.GetAll();
        foreach (var item in products)
        {
             model.Add(new StockViewModel
            {
                ProductId = item.Id,
                ProductName = item.Name,
                BrandsId = item.BrandId.Id,
                BrandsName = item.BrandId.Name,
                CategoryId = item.CategoryId.Id,
                CateogryName = item.CategoryId.Name
            });
        }
       


        return model;
    }
    void Submit(StockViewModel model)
    {
        var stock = StockService.Insert(TEntity(model));
        NotificationService.Notify(NotificationSeverity.Info, stock.ProductId.Name + " üründen toplam:" + stock.Piece.ToString() + " adet ürün eklenmiştir.");
    }

    Stock TEntity(StockViewModel entity)
    {
        var product = ProductService.GetById(entity.ProductId);

        return new Stock
            {

                Id = entity.Id,
                Piece = entity.Piece,
                StockDate = entity.StockDate,
                ProductId = product
            };
    }
}
